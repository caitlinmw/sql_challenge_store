--bring in separate months' data and union
WITH trades AS
(SELECT *, 'JAN2023' AS FILEDATE FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_01
UNION ALL
SELECT *, 'FEB2023' AS FILEDATE FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_02
UNION ALL
SELECT *, 'MAR2023' AS FILEDATE FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_03
UNION ALL
SELECT *, 'APR2023' AS FILEDATE FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_04
UNION ALL
SELECT *, 'MAY2023' AS FILEDATE FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_05
UNION ALL
SELECT *, 'JUN2023' AS FILEDATE FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_06
UNION ALL
SELECT *, 'JUL2023' AS FILEDATE FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_07
UNION ALL
SELECT *, 'AUG2023' AS FILEDATE FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_08
UNION ALL
SELECT *, 'SEP2023' AS FILEDATE FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_09
UNION ALL
SELECT *, 'OCT2023' AS FILEDATE FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_10
UNION ALL
SELECT *, 'NOV2023' AS FILEDATE FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_11
UNION ALL
SELECT *, 'DEC2023' AS FILEDATE FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_12)

--from this unioned table, create a query that applies the market cap and purchase price categories, and applies a ranking
SELECT  FILEDATE
        , TO_NUMBER(REGEXP_SUBSTR(MARKET_CAP, '[0-9]+\.[0-9]+'))
        * CASE
        WHEN REGEXP_SUBSTR(MARKET_CAP, '[A-Z]*$') = 'B' THEN 1000000000
        WHEN REGEXP_SUBSTR(MARKET_CAP, '[A-Z]*$') = 'M' THEN 1000000
        ELSE 1
        END
        AS MARKET_CAPITALISATION
        , CASE
        WHEN MARKET_CAPITALISATION < 100000000 THEN 'Small'
        WHEN MARKET_CAPITALISATION >= 100000000 AND MARKET_CAPITALISATION < 1000000000 THEN 'Medium'
        WHEN MARKET_CAPITALISATION >= 1000000000 AND MARKET_CAPITALISATION < 100000000000 THEN 'Large'
        WHEN MARKET_CAPITALISATION >= 100000000000 THEN 'Huge'
        END
        AS MARKET_CAPITALISATION_CATEGORY
        , CASE
        WHEN TO_NUMBER(REGEXP_SUBSTR(PURCHASE_PRICE, '[0-9]+\.[0-9]+')) < 25000 THEN 'Low'
        WHEN TO_NUMBER(REGEXP_SUBSTR(PURCHASE_PRICE, '[0-9]+\.[0-9]+')) >= 25000 AND TO_NUMBER(REGEXP_SUBSTR(PURCHASE_PRICE, '[0-9]+\.[0-9]+')) < 50000 THEN 'Medium'
        WHEN TO_NUMBER(REGEXP_SUBSTR(PURCHASE_PRICE, '[0-9]+\.[0-9]+')) >= 50000 AND TO_NUMBER(REGEXP_SUBSTR(PURCHASE_PRICE, '[0-9]+\.[0-9]+')) < 75000 THEN 'High'
        WHEN TO_NUMBER(REGEXP_SUBSTR(PURCHASE_PRICE, '[0-9]+\.[0-9]+')) >= 75000 AND TO_NUMBER(REGEXP_SUBSTR(PURCHASE_PRICE, '[0-9]+\.[0-9]+')) <= 100000 THEN 'Very High'
        END
        AS PURCHASE_PRICE_CATEGORY
        , TO_NUMBER(REGEXP_SUBSTR(PURCHASE_PRICE, '[0-9]+\.[0-9]+')) PURCHASE_PRICE
        , TICKER
        , SECTOR
        , STOCK_NAME
        , RANK() OVER (PARTITION BY FILEDATE,  MARKET_CAPITALISATION_CATEGORY, PURCHASE_PRICE_CATEGORY ORDER BY PURCHASE_PRICE DESC)
        AS RANK_N
FROM trades
WHERE MARKET_CAPITALISATION IS NOT NULL
GROUP BY FILEDATE, MARKET_CAPITALISATION_CATEGORY, PURCHASE_PRICE_CATEGORY, MARKET_CAPITALISATION, PURCHASE_PRICE, TICKER, SECTOR, STOCK_NAME
QUALIFY RANK_N <= 5
ORDER BY FILEDATE, MARKET_CAPITALISATION_CATEGORY, PURCHASE_PRICE_CATEGORY DESC, RANK_N ASC;